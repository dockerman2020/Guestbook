---
kind: secret
name: docker_username
get:
  path: docker
  name: username
---
kind: secret
name: docker_password
get:
  path: docker
  name: password
---
kind: secret
name: k8s_crt
get:
  path: k8s
  name: ca_crt
---
kind: secret
name: k8s_server
get:
  path: k8s
  name: server
---
kind: secret
name: k8s_token
get:
  path: k8s
  name: token

---
kind: pipeline
type: kubernetes
name: build

steps:
  - name: Build docker image
    image: plugins/docker
    settings:
      registry: quay.io
      repo: quay.io/absiplant/guestbook
      dockerfile: guestbook/php-redis/Dockerfile
      context: guestbook/php-redis
      username:
        from_secret: guestbook_robot
      password:
        from_secret: guestbook_robot_password
      tags:
        - latest
        - ${DRONE_COMMIT_SHA}
      when:
        branch:
          include:
          - main
          # - feature/*
        event: [pull_request]

  - name: Scan demo guest book Image
    ##image: aquasec/trivy:0.32.0
    settings:
      registry: quay.io
    # image: dockerman2002/trivy-client:v0.0.16
    image: quay.io/absiplant/scanner:f845c5963fe7f246b9f49173838328971f53e498
    commands:
    - trivy --version
    - "python -V"
    - "trivy image \
      --token $ttoken \
      --ignore-unfixed \
      --server $tserver \
      --security-checks vuln \
      --severity LOW,MEDIUM,HIGH,CRITICAL \
        quay.io/absiplant/guestbook:${DRONE_COMMIT_SHA} -f json"
      # quay.io/absiplant/guestbook:${DRONE_COMMIT_SHA} \
      # -f json |jq '.Results[0] .Vulnerabilities[] |{VulnerabilityID: .VulnerabilityID, PkgName: .PkgName, InstalledVersion: .InstalledVersion, FixedVersion: .FixedVersion,Severity: .Severity, PrimaryURL: .PrimaryURL,Title: .Title, PublishedDate: .PublishedDate, LastModifiedDate: .LastModifiedDate}' \
      # |tee -a /drone/src/slack_results.out"
    # - cat /drone/src/scan_results.out
    # - "
    #   VULNFOUND=`/bin/grep Vulnerabilities /drone/src/scan_results.out`
    #   [ ! -z $VULNFOUND ] && /bin/cat /drone/src/scan_results.out |\
    #   /usr/bin/jq '.Results[0] .Vulnerabilities[] |
    #   {VulnerabilityID: .VulnerabilityID, PkgName: .PkgName, InstalledVersion: .InstalledVersion, 
    #   FixedVersion: .FixedVersion, Severity: .Severity, PrimaryURL: .PrimaryURL,
    #   Title: .Title, PublishedDate: .PublishedDate, LastModifiedDate: .LastModifiedDate}' \
    #   || echo 'WHOOO HOOO! Clean image built!.\n
    #            {{#success build.status}} 
    #            {{/success}}{{uppercasefirst build.status }}: Build #{{ build.number }} * (type: `{{ build.event }}`)\n
    #             Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>\n
    #             Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>\n
    #             Author: {{ build.author }}\n
    #             Build: <{{ build.link }}| Drone Build {{ build.number }}> Sucessful :mag: :package: :tada:' >/drone/src/slack_results.out
    #   "
    environment:
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token
      ttoken:
        from_secret: trivy_token
      tserver:
        from_secret: trivy_server

  # - name: Build Failure Status Nofification
  #   image: plugins/slack
  #   settings:
  #     token:
  #       from_secret: drone_slack_token
  #     webhook:
  #       from_secret: slack_webhook
  #     channel: k8s
  #     alt_text: "cute cat"
  #     image_url: "https://media.giphy.com/media/26tPjmWwr36k1OkYE/giphy.gif"
  #     link_names: "true"
  #     template: >
  #       {{#failure build.status}} :x: :rotating_light: :fire_engine: :ambulance: {{/failure}} {{ uppercasefirst build.status }}: Build #{{ build.number }} * (type: `{{ build.event }}`)
  #       Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
  #       Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>
  #       Author: {{ build.author }}      
  #       Build: {{ build.link }}| Drone Build {{ build.number }} Failed :ghost: 
  #   when:
  #     status:
  #     - failure 

  - name: Build Status Nofification success
    image: plugins/slack
    settings:
      token:
        from_secret: drone_slack_token
      webhook:
        from_secret: slack_webhook
      channel: k8s
      image_url: "https://media.giphy.com/media/xT5LMHxhOfscxPfIfm/giphy.gif"
      link_names: "true"
      template: file:///drone/src/slack_results.out
        # {{#success build.status}} {{ else }} :x: :rotating_light: :fire_engine: :ambulance: {{/success}} {{ uppercasefirst build.status }}: Build #{{ build.number }} * (type: `{{ build.event }}`)
        # Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
        # Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>
        # Author: {{ build.author }}
        # file:///drone/src/slack_msg.txt      
        # Build: {{ build.link }}| Drone Build {{ build.number }} Sucessful :mag: :package: :tada:
      status: 
      - failure
      - success

---
kind: pipeline
type: kubernetes
name: deploy

steps:
  # - name: Deploy redis follower service
  #   image: danielgormly/drone-plugin-kube:0.2.0
  #   settings:
  #     template: guestbook/redis-follower-service.yaml
  #     namespace: guestbook-demo
  #     ca:
  #       from_secret: k8s_crt
  #     server:
  #       from_secret: k8s_server
  #     token:
  #       from_secret: k8s_token

  - name: Deploy demo guest book redis follower deployment
    image: danielgormly/drone-plugin-kube:0.2.0
    settings:
      template: guestbook/redis-follower-deployment.yaml
      namespace: guestbook-demo
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token

  - name: Deploy redis leader service
    image: danielgormly/drone-plugin-kube:0.2.0
    settings:
      template: guestbook/redis-leader-service.yaml
      namespace: guestbook-demo
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token

  - name: Deploy demo guest book redis leader deployment
    image: danielgormly/drone-plugin-kube:0.2.0
    settings:
      template: guestbook/redis-leader-deployment.yaml
      namespace: guestbook-demo
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token

  - name: Deploy frontend service
    image: danielgormly/drone-plugin-kube:0.2.0
    settings:
      template: guestbook/frontend-service.yaml
      namespace: guestbook-demo
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token

  - name: Deploy frontend deployment
    image: danielgormly/drone-plugin-kube:0.2.0
    settings:
      registry: quay.io
      # image_tag: ${DRONE_TAG}
      image_tag: ${DRONE_COMMIT_SHA}
      template: guestbook/frontend-deployment.yaml
      namespace: guestbook-demo
      ca:
        from_secret: k8s_crt
      server:
        from_secret: k8s_server
      token:
        from_secret: k8s_token
    